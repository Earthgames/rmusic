//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "track")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub date: Date,
    pub number: i32,
    pub duration: i32,
    pub artist_id: i32,
    pub release_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::artist::Entity",
        from = "Column::ArtistId",
        to = "super::artist::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Artist,
    #[sea_orm(has_many = "super::genre::Entity")]
    Genre,
    #[sea_orm(has_many = "super::playlist_item::Entity")]
    PlaylistItem,
    #[sea_orm(
        belongs_to = "super::release::Entity",
        from = "Column::ReleaseId",
        to = "super::release::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Release,
    #[sea_orm(has_many = "super::track_location::Entity")]
    TrackLocation,
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artist.def()
    }
}

impl Related<super::genre::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Genre.def()
    }
}

impl Related<super::playlist_item::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlaylistItem.def()
    }
}

impl Related<super::release::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Release.def()
    }
}

impl Related<super::track_location::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrackLocation.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
