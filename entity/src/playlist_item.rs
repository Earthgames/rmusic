//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "playlist_item")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub date: Date,
    pub number: i32,
    pub r#type: i32,
    pub deleted: bool,
    pub playlist_id: i32,
    pub item_playlist_id: Option<i32>,
    pub item_track_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::playlist::Entity",
        from = "Column::ItemPlaylistId",
        to = "super::playlist::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Playlist2,
    #[sea_orm(
        belongs_to = "super::playlist::Entity",
        from = "Column::PlaylistId",
        to = "super::playlist::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Playlist1,
    #[sea_orm(
        belongs_to = "super::track::Entity",
        from = "Column::ItemTrackId",
        to = "super::track::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Track,
}

impl Related<super::track::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Track.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
